<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <rate-limit-by-key calls="500" renewal-period="60" counter-key="@(context.Subscription?.Key ?? "anonymous")" />
        <validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
            <openid-config url="https://login.microsoftonline.com/639c4ac5-cced-4878-9de0-f88262a6b334/.well-known/openid-configuration" />
            <audiences>
                <audience>api://8bb1299e-f1f1-43db-8cbd-9de363a06def</audience>
                <audience>api://372ddb18-b526-4de3-b6a4-08559292e7d9</audience>
            </audiences>
        </validate-jwt>
        <include-fragment fragment-id="validation-WAF-FD" />
        <set-header name="x-api-key" exists-action="override">
            <value>@{
				string appId = "NOAUTH";
				string authHeader = context.Request.Headers.GetValueOrDefault("Authorization", "");
				if (authHeader?.Length > 0)
				{
					string[] authHeaderParts = authHeader.Split(' ');
					if (authHeaderParts?.Length == 2 && authHeaderParts[0].Equals("Bearer", StringComparison.InvariantCultureIgnoreCase))
					{
					Jwt jwt;
					if (authHeaderParts[1].TryParseJwt(out jwt))
					{				
						appId = jwt.Claims.GetValueOrDefault("appid", "NOAPPID");
					}
					}
				}return appId;
            }</value>
        </set-header>
        <set-header name="X-CorrelationID" exists-action="skip">
            <value>@{ 
                var guidBinary = new byte[16];
                Array.Copy(Guid.NewGuid().ToByteArray(), 0, guidBinary, 0, 10);
                long time = DateTime.Now.Ticks;
                byte[] bytes = new byte[6];
                unchecked
                {
                       bytes[5] = (byte)(time >> 40);
                       bytes[4] = (byte)(time >> 32);
                       bytes[3] = (byte)(time >> 24);
                       bytes[2] = (byte)(time >> 16);
                       bytes[1] = (byte)(time >> 8);
                       bytes[0] = (byte)(time);
                }
                Array.Copy(bytes, 0, guidBinary, 10, 6);
                return new Guid(guidBinary).ToString();
            }</value>
        </set-header>
        <base />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <choose>
            <when condition="@(context.Response.StatusCode == 429)">
                <set-variable name="StatusReason" value="@(context.Response.StatusReason)" />
                <return-response>
                    <set-status code="@(context.Response.StatusCode)" reason="Too many requests in a short amount of time. Wait a few minutes and try again." />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-header name="X-CorrelationID" exists-action="skip">
                        <value>@(context.RequestId.ToString())</value>
                    </set-header>
                </return-response>
            </when>
            <when condition="@(context.Response.StatusCode == 404)">
                <set-variable name="StatusReason" value="@(context.Response.StatusReason)" />
                <return-response>
                    <set-status code="@(context.Response.StatusCode)" reason="@(context.Response.StatusReason)" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-header name="X-CorrelationID" exists-action="skip">
                        <value>@(context.RequestId.ToString())</value>
                    </set-header>
                    <set-header name="Request" exists-action="skip">
                        <value>@(context.RequestId.ToString())</value>
                    </set-header>
                </return-response>
            </when>
            <when condition="@(context.Response.StatusCode == 401)">
                <set-variable name="StatusReason" value="@(context.Response.StatusReason)" />
                <return-response>
                    <set-status code="@(context.Response.StatusCode)" reason="Unauthorized: Authorization information is missing or invalid." />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-header name="X-CorrelationID" exists-action="skip">
                        <value>@(context.RequestId.ToString())</value>
                    </set-header>
                </return-response>
            </when>
            <otherwise />
        </choose>
        <base />
    </on-error>
</policies>